
namespace mix {

    inline bool Word::is_positive() const {
        return positive;
    }

    inline bool Word::is_negative() const {
        return !positive;
    }

    inline void Word::set_positive() {
        positive = true;
    }

    inline void Word::set_negative() {
        positive = false;
    }

    inline void Word::set_byte(std::uint8_t position, const Byte& value) {
        if (position == 0 || position > 5) {
            return;
        }

        bytes[position-1].set_value(value);
    }
    
    inline const Byte& Word::get_byte(std::uint8_t position) const {
        if (position == 0 || position > 5) {
            throw std::runtime_error("invalid operation");
        }

        return bytes[position - 1];
    }

    inline Byte& Word::get_byte(std::uint8_t position) {
        if (position == 0 || position > 5) {
            throw std::runtime_error("invalid operation");
        }

        return bytes[position - 1];
    }

    inline Word& Word::operator=(const Word& rhs) {
        if (this == &rhs) {
            return *this;
        }

        positive = rhs.positive;
        bytes = rhs.bytes;

        return *this;
    }

    inline bool Word::operator==(const Word& rhs) const {
        if (this == &rhs) {
            return true;
        }

        if (positive != rhs.positive) {
            return false;
        }

        for (int i = 0; i < 5; i++) {
            if (bytes[i] != rhs.bytes[i]) {
                return false;
            }
        }
	
        return true;
    }

    inline bool Word::operator!=(const Word& rhs) const {
        return !(*this == rhs);
    }

    inline void Word::clear() {
        set_positive();
        bytes.fill(0);
    }
}

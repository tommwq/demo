用例1：用户登录。

前置条件：无。
用户打开程序，输入用户名和密码，点击登录按钮。系统判断密码是否正确。如果密码正确，登录完成，系统为用户分配一个会话。如果密码错误，显示错误信息。

用例2：用户查看帐户余额。

前置条件：登陆。
用户点击查看余额按钮，系统显示余额。

用例3：用户存款。

前置条件：登陆。
用户点击存款按钮，输入金额，系统显示存储结果。

用例4：用户取款。

前置条件：登陆。
用户点击存款按钮，输入金额，系统显示存储结果。

用例5：用户设立账户。

前置条件：已经登录。
用户点击开立账户按钮，系统开立账户，显示账户号。。

用例6：用户关闭帐户。

前置条件：登陆。
用户点击关闭账户按钮。系统关闭账户。关闭的账户不可登录。如果账户余额大于0，系统显示失败。

用例7：用户授权用户帐户取款权限。

前置条件：登陆。
用户点击授权按钮，输入金额和授权用户，系统显示存储结果。

用例8：用户转帐。

前置条件：登陆。
用户点击转账按钮，输入金额、目标账户、目标用户名，系统显示结果。
方案1：用数据库事物。
方案2：
1 锁源账户；
2 在数据库中建立临时结构：（源账户、目标账户、金额，时间，转入）；
3 扣减源账户；
4 解锁源账户；
5 锁目标账户；
6 加目标账户，
7 将记录改为（已转出）；
8 解锁目标账户。
方案3：考虑目标账户无法锁定的情况（比如外部账户）
方案4：使用事件。

用例9：冻结账户。
用例10：恢复账户。
用例11：账户变更需要审批和授权。
用例12：冻结账户转出。
用例13：查看账单。
用例14：大额转账警报。


TODO 实现grant和transfer。
TODO 将异常捕获放到Listener/Filter中。
TODO 增加请求计时。如果启动参数--debug，开启计时。
TODO 优化界面。
TODO 使用WebFlux开发管理接口。
TODO 总结Spring Boot + SpringMVC开发流程。
TODO 发布事件
TODO 使用ElementUI
syntax = "proto3";

package com.tq.applogcollect;

option java_package = "com.tq.applogcollect";
option java_outer_classname ="AppLogCollectProto";

// 服务器向App发出命令，要求App上报日志。
// TODO 重新审定协议。
message LogQueryCommand {
  string package_name = 1;
  int64 last_sequence = 2; // 0 表示从最新一条日志开始
  int32 count = 3;
  bool include_sub_package = 4;
}

// 模块版本信息。
message ModuleVersion {
  string module_name = 1;
  string module_version = 2;
}

// 日志级别。
enum LogLevel {
  TRACE = 0;
  DEBUG = 1;
  INFO = 2;
  WARN = 3;
  ERROR = 4;
  FATAL = 5;
}

// App上报给服务器的日志。
message LogRecord {
  int64 sequence = 1;
  int64 associated_sequence = 2;
  LogLevel log_level = 3;
  int64 local_time = 4;
  string app_version = 5;
  repeated ModuleVersion module_versions = 6;
  string source_file = 7;
  int32 line_number = 8;
  string package_name = 9;
  string class_name = 10;
  string method_name = 11;
  repeated string method_parameters = 12;
  string method_result = 13;
}

// message Empty {}

service LogCollectService {
  rpc Report (stream LogRecord) returns (stream LogQueryCommand);
  // 需要心跳吗？
  // rpc Heartbeat (stream Empty) returns (stream Empty);
}
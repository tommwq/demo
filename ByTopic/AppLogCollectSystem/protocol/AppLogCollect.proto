syntax = "proto3";

package com.tq.applogcollect;

option java_package = "com.tq.applogcollect";
option java_outer_classname ="AppLogCollectProto";

// 服务器向App发出命令，要求App上报日志。
// TODO 重新审定协议。
message LogQueryCommand {
  string package_name = 1;
  int64 sequence = 2; // 0 表示从最新一条日志开始
  int32 count = 3;
  bool include_sub_package = 4;
}

// 模块版本信息。
message ModuleVersion {
  string module_name = 1;
  string module_version = 2;
}

// 日志级别。
enum LogLevel {
  TRACE = 0;
  DEBUG = 1;
  INFO = 2;
  WARN = 3;
  ERROR = 4;
  FATAL = 5;
}

message CommonInfo {
  int64 sequence = 1;
  int64 time = 2;
  int8 content_type = 3;
}

// App上报给服务器的日志。
message LogRecord {
  int64 sequence = 1;
  int64 associated_sequence = 2;
  LogLevel log_level = 3;
  int64 local_time = 4;
  string app_version = 5;
  repeated ModuleVersion module_versions = 6;
  string source_file = 7;
  int32 line_number = 8;
  string package_name = 9;
  string class_name = 10;
  string method_name = 11;
  repeated string method_parameters = 12;
  string method_result = 13;
  string device_id = 14;
}

// User defined message.
message UserDefinedMessage {
  int64 sequence = 1;
  int64 time = 2;
  string source_file = 3;
  int32 line_number = 4;
  string package_name = 5;
  string class_name = 6;
  string method_name = 7;
  string user_defined_message = 8;
}

// Module name and version.
message ModuleInfo {
  string module_name = 1;
  string module_version = 2;
}

// Device and app information.
message DeviceAndAppInfoLog {
  int64 sequence = 1;
  int64 time = 2;
  string device_id = 3;
  string device_version = 4;
  string base_os_name = 5;
  string base_os_version = 6;
  string os_name = 7;
  string os_version = 8;
  string app_version = 9;
  repeated ModuleInfo module_info = 6;
}

message ObjectInfo {
  string object_name = 1;
  string object_type = 2;
  string object_value = 3;
}

message MethodInfo {
  string source_file = 1;
  int32 line_number = 2;
  string package_name = 3;
  string class_name = 4;
  string method_name = 5;
  repeated ObjectInfo method_parameter = 6;
  ObjectInfo method_result = 7;
}

// Method and object information
message MethodAndObjectInfo {
  int64 sequence = 1;
  int64 time = 2;
  MethodInfo method = 3;
  repeated ObjectInfo variable = 4;
}

message ExceptionInfo {
  int64 sequence = 1;
  int64 time = 2;
  ObjectInfo exception = 3;
  repeated MethodInfo stack = 4;
}


// For heartbeat.
message Empty {}

service LogCollectService {
  rpc Report (stream LogRecord) returns (stream LogQueryCommand);
  rpc Heartbeat (stream Empty) returns (stream Empty);
}
syntax = "proto3";

package com.tq.applogcollect;

option java_package = "com.tq.applogcollect";
option java_outer_classname ="AppLogCollectProto";

import "google/protobuf/any.proto";

// 服务器向App发出命令，要求App上报日志。
// TODO 重新审定协议。
message Command {
  string package_name = 1;
  int64 sequence = 2; // 0 表示从最新一条日志开始
  int32 count = 3;
  bool include_sub_package = 4;
}

enum LogType {
  UNKNOWN = 0;
  DEVICE_AND_APP_INFO = 1;
  METHOD_AND_OBJECT_INFO = 2;
  EXCEPTION_INFO = 3;
  USER_DEFINED = 4;
}

message LogHeader {
  int64 sequence = 1;
  int64 time = 2;
  LogType log_type = 3;
}

// App上报给服务器的日志。
message Log {
  LogHeader header = 1;
  google.protobuf.Any body = 2;
}

// User defined message.
message UserDefinedMessage {
  string source_file = 1;
  int32 line_number = 2;
  string package_name = 3;
  string class_name = 4;
  string method_name = 5;
  string user_defined_message = 6;
}

// Module name and version.
message ModuleInfo {
  string module_name = 1;
  string module_version = 2;
}

// Device and app information.
message DeviceAndAppInfo {
  string device_id = 1;
  string device_version = 2;
  string base_os_name = 3;
  string base_os_version = 4;
  string os_name = 5;
  string os_version = 6;
  string app_version = 7;
  repeated ModuleInfo module_info = 8;
}

message ObjectInfo {
  string object_type = 1;
  string object_value = 2;
}

message MethodInfo {
  string source_file = 1;
  int32 line_number = 2;
  string class_name = 3;
  string method_name = 4;
}

// Method and object information
message MethodAndObjectInfo {
  MethodInfo method = 1;
  repeated ObjectInfo variable = 2;
}

message ExceptionInfo {
  ObjectInfo exception = 1;
  repeated MethodInfo stack = 2;
}


// For heartbeat.
message Empty {}

service LogCollectService {
  rpc Report (stream Log) returns (stream Command);
  rpc Heartbeat (stream Empty) returns (stream Empty);
}